using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using Foxy.Params.SourceGenerator.Helpers;
using Foxy.Params.SourceGenerator.Data;
using System.Diagnostics.CodeAnalysis;

namespace Foxy.Params.SourceGenerator
{
    partial class ParamsIncrementalGenerator : IIncrementalGenerator
    {
        private void GenerateSource(SourceProductionContext context, ImmutableArray<ParamsCandidate> typeSymbols)
        {
            foreach (var diagnostic in typeSymbols
                .OfType<FailedParamsCandidate>()
                .SelectMany(e => e.Diagnostics))
            {
                context.ReportDiagnostic(diagnostic);

            }
            foreach (var uniqueClass in typeSymbols
                .OfType<SuccessfulParamsCandidate>()
                .GroupBy(e => e.ContainingType, SymbolEqualityComparer.Default))
            {
                var typeInfo = uniqueClass.Key as INamedTypeSymbol;
                AssertNotNull(typeInfo);
                var sb = new SourceBuilder();
                sb.AutoGenerated();
                sb.AppendLine();
                sb.NullableEnable();
                sb.AppendLine();
                AddNamespace(sb, typeInfo);
                var nestLevel = CreateClasses(typeInfo, sb);
                var maxOverridesMax = 0;
                foreach (var item in uniqueClass)
                {
                    var maxOverrides = item.MaxOverrides;
                    string name = item.MethodSymbol.Name;
                    var spanArgumentType = GetSpanArgumentType(item.SpanParam);
                    var parameterInfos = GetNonParamsArguments(item.MethodSymbol);
                    var fixArguments = parameterInfos.Select(e => e.ToParameter()).ToList();
                    var returnsKind = SemanticHelpers.GetReturnsKind(item.MethodSymbol);
                    var typeArguments = item.MethodSymbol.TypeArguments.Select(e => e.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)).ToList();
                    var typeConstraints = CreateTypeConstraints(item.MethodSymbol.TypeArguments);
                    string returnType = CreateReturnTypeFor(item.MethodSymbol);
                    var argName = item.SpanParam.Name;
                    var argNameSpan = $"{argName}Span";
                    var argNameSpanInput = item.SpanParam.RefKind == RefKind.Ref || item.SpanParam.RefKind == RefKind.RefReadOnlyParameter
                        ? $"ref {argNameSpan}"
                        : argNameSpan;
                    var isStatic = item.MethodSymbol.IsStatic;

                    for (int i = 1; i <= maxOverrides; i++)
                    {
                        if (i > 1)
                        {
                            sb.AppendLine();
                        }

                        var variableArguments = Enumerable.Range(0, i).Select(j => $"{spanArgumentType} {argName}{j}");
                        sb.Method(
                            name,
                            fixArguments.Concat(variableArguments),
                            isStatic,
                            returnType,
                            typeArguments,
                            typeConstraints);
                        sb.AppendLine($"var {argName} = new Arguments{i}<{spanArgumentType}>({string.Join(", ", Enumerable.Range(0, i).Select(j => $"{argName}{j}"))});");
                        sb.AppendLine($"var {argNameSpan} = global::System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan(ref {argName}.arg0, {i});");
                        CreateCallLine(
                            sb,
                            name,
                            parameterInfos,
                            returnsKind,
                            typeArguments,
                            argNameSpanInput);
                        sb.CloseBlock();
                    }

                    if (item.HasParams)
                    {
                        sb.AppendLine();
                        sb.Method(
                            name,
                            fixArguments.Append($"params {spanArgumentType}[] {argName}"),
                            isStatic,
                            returnType,
                            typeArguments,
                            typeConstraints);
                        sb.AppendLine($"var {argNameSpan} = new global::System.ReadOnlySpan<{spanArgumentType}>({argName});");
                        CreateCallLine(
                            sb,
                            name,
                            parameterInfos,
                            returnsKind,
                            typeArguments,
                            argNameSpanInput);
                        sb.CloseBlock();
                    }

                    maxOverridesMax = Math.Max(maxOverridesMax, maxOverrides);
                }

                CloseTimes(sb, nestLevel);
                for (int i = 1; i <= maxOverridesMax; i++)
                {
                    sb.AppendLine();
                    CreateArguments(sb, i);
                }

                AddNamespaceCloseBlock(sb, typeInfo);
                context.AddSource(
                    SemanticHelpers.CreateFileName(typeInfo),
                    SourceText.From(sb.ToString(), Encoding.UTF8));
            }

        }

        private void AssertNotNull([NotNull]object? typeInfo)
        {
            if(typeInfo is null)
                throw new ArgumentNullException(nameof(typeInfo));
        }

        private string CreateReturnTypeFor(IMethodSymbol methodSymbol)
        {
            var returnType = methodSymbol.ReturnType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
            var isNullable = methodSymbol.ReturnType.NullableAnnotation == NullableAnnotation.Annotated;
            if (methodSymbol.ReturnsByRef)
            {
                return SemanticHelpers.WithModifiers(returnType, RefKind.Ref, isNullable);
            }
            else if (methodSymbol.ReturnsByRefReadonly)
            {
                return SemanticHelpers.WithModifiers(returnType, RefKind.RefReadOnlyParameter, isNullable);
            }

            return SemanticHelpers.WithModifiers(returnType, RefKind.None, isNullable);
        }

        private List<TypeConstrainInfo> CreateTypeConstraints(ImmutableArray<ITypeSymbol> typeArguments)
        {
            var typeConstraintsList = new List<TypeConstrainInfo>();
            foreach (var typeArg in typeArguments.Cast<ITypeParameterSymbol>())
            {
                var typeConstraints = new List<string>();
                if (typeArg.HasUnmanagedTypeConstraint)
                {
                    typeConstraints.Add("unmanaged");
                }
                else if (typeArg.HasValueTypeConstraint)
                {
                    typeConstraints.Add("struct");
                }
                else if (typeArg.HasReferenceTypeConstraint)
                {
                    typeConstraints.Add("class");
                }
                else if (typeArg.HasNotNullConstraint)
                {
                    typeConstraints.Add("notnull");
                }
                if (typeArg.ConstraintTypes.Length > 0)
                {
                    foreach (var item in typeArg.ConstraintTypes)
                    {
                        typeConstraints.Add(item.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat));
                    }
                }
                if (typeArg.HasConstructorConstraint)
                {
                    typeConstraints.Add("new()");
                }
                if (typeConstraints.Count > 0)
                {
                    typeConstraintsList.Add(new TypeConstrainInfo
                    {
                        Type = typeArg.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat),
                        Constraints = typeConstraints
                    });
                }
            }
            return typeConstraintsList;
        }

        private static void CreateCallLine(
            SourceBuilder sb,
            string name,
            List<ParameterInfo> parameterInfos,
            ReturnKind returnsKind,
            List<string> typeArguments,
            string paramsArgument)
        {
            var codeLine = sb.StartLine();
            if (returnsKind != ReturnKind.ReturnsVoid)
            {
                codeLine.Returns();
            }
            if(returnsKind == ReturnKind.ReturnsRef)
            {
                codeLine.AddSegment("ref ");
            }
            codeLine.AddSegment(name);
            if (typeArguments.Count > 0)
            {
                codeLine.AddSegment("<");
                codeLine.AddCommaSeparatedList(typeArguments);
                codeLine.AddSegment(">");
            }
            codeLine.AddSegment("(");
            codeLine.AddCommaSeparatedList(parameterInfos.Select(e => e.ToPassParameter()));
            codeLine.AddSegment($", {paramsArgument})");
            codeLine.EndLine();
        }

        private string GetSpanArgumentType(IParameterSymbol spanParam)
        {
            var spanType = spanParam.Type as INamedTypeSymbol;
            AssertNotNull(spanType);
            var spanTypeArgument = spanType.TypeArguments.First();
            string spanTypeName = spanTypeArgument.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
            bool isNullable = spanTypeArgument.NullableAnnotation == NullableAnnotation.Annotated;
            return SemanticHelpers.WithModifiers(spanTypeName, RefKind.None, isNullable);
        }

        private static List<ParameterInfo> GetNonParamsArguments(IMethodSymbol methodSymbol)
        {
            return methodSymbol.Parameters
                .Take(methodSymbol.Parameters.Length - 1)
                .Select(arg => new ParameterInfo(arg))
                .ToList();
        }

        private void CreateArguments(SourceBuilder sb, int length)
        {
            sb.Attribute($"System.Runtime.CompilerServices.InlineArray({length})");
            sb.GenericStruct($"Arguments{length}", "T");
            sb.Field("T", "arg0");
            sb.AppendLine();
            sb.Constructor(Enumerable.Range(0, length).Select(e => $"T value{e}"));
            sb.AppendLine($"arg0 = value0;");
            for (int i = 1; i < length; i++)
            {
                sb.AppendLine($"this[{i}] = value{i};");
            }
            sb.CloseBlock();
            sb.CloseBlock();
        }

        private static int CreateClasses(INamedTypeSymbol? typeInfo, SourceBuilder sb)
        {
            var items = SemanticHelpers.GetTypeHierarchy(typeInfo);
            foreach (var item in items)
            {
                sb.Class(item.ToDisplayString(SymbolDisplayFormat.MinimallyQualifiedFormat));
            }

            return items.Count;
        }

        private static void CloseTimes(SourceBuilder sb, int nestLevel)
        {
            for (int i = 0; i < nestLevel; i++)
            {
                sb.CloseBlock();
            }
        }

        private static void AddNamespace(SourceBuilder sb, INamedTypeSymbol typeInfo)
        {
            if (typeInfo.ContainingNamespace.IsGlobalNamespace)
                return;

            sb.Namespace(SemanticHelpers.GetNameSpaceNoGlobal(typeInfo));
        }

        private static void AddNamespaceCloseBlock(SourceBuilder sb, INamedTypeSymbol typeInfo)
        {
            if (typeInfo.ContainingNamespace.IsGlobalNamespace)
                return;

            sb.CloseBlock();
        }
    }
}

