using Foxy.Params.SourceGenerator.Data;
using Foxy.Params.SourceGenerator.Helpers;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;

namespace Foxy.Params.SourceGenerator.SourceGenerator
{
    internal class OverridesGenerator
    {
        private readonly SourceBuilder _sourceBuilder;
        private readonly INamedTypeSymbol _typeInfo;
        private readonly IEnumerable<SuccessfulParamsCandidate> _paramsCandidates;
        private readonly int _maxOverridesMax;
        public OverridesGenerator(INamedTypeSymbol typeInfo, IEnumerable<SuccessfulParamsCandidate> paramsCandidates)
        {
            _sourceBuilder = new SourceBuilder();
            _typeInfo = typeInfo ?? throw new ArgumentNullException(nameof(typeInfo));
            _paramsCandidates = paramsCandidates ?? throw new ArgumentNullException(nameof(paramsCandidates));
            _maxOverridesMax = paramsCandidates.Max(e => e.MaxOverrides);
        }

        public SourceText Execute()
        {
            _sourceBuilder.Clear();
            _sourceBuilder.AutoGenerated();
            _sourceBuilder.AppendLine();
            _sourceBuilder.NullableEnable();
            _sourceBuilder.AppendLine();
            GenerateNamespace();

            return SourceText.From(_sourceBuilder.ToString(), Encoding.UTF8);
        }

        private void GenerateNamespace()
        {
            AddNamespace(_sourceBuilder, _typeInfo);

            GenerateOverrideClass();
            GenerateArgumentsClass();

            AddNamespaceCloseBlock(_sourceBuilder, _typeInfo);
        }

        private void GenerateOverrideClass()
        {
            var nestLevel = CreateClasses(_typeInfo, _sourceBuilder);

            foreach (var paramsCandidate in _paramsCandidates)
            {
                var data = new DerivedData(paramsCandidate);
                
                for (int i = 1; i <= paramsCandidate.MaxOverrides; i++)
                {
                    if (i > 1)
                    {
                        _sourceBuilder.AppendLine();
                    }

                    var variableArguments = Enumerable.Range(0, i).Select(j => $"{data.SpanArgumentType} {data.ArgName}{j}");
                    _sourceBuilder.Method(
                        data.MethodName,
                        data.FixArguments.Concat(variableArguments),
                        data.IsStatic,
                        data.ReturnType,
                        data.TypeArguments,
                        data.TypeConstraints);
                    _sourceBuilder.AppendLine($"var {data.ArgName} = new Arguments{i}<{data.SpanArgumentType}>({string.Join(", ", Enumerable.Range(0, i).Select(j => $"{data.ArgName}{j}"))});");
                    _sourceBuilder.AppendLine($"var {data.ArgNameSpan} = global::System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan(ref {data.ArgName}.arg0, {i});");
                    CallOriginalMethod(
                        data.MethodName,
                        data.ParameterInfos,
                        data.ReturnsKind,
                        data.TypeArguments,
                        data.ArgNameSpanInput);
                    _sourceBuilder.CloseBlock();
                }

                if (paramsCandidate.HasParams)
                {
                    _sourceBuilder.AppendLine();
                    _sourceBuilder.Method(
                        data.MethodName,
                        data.FixArguments.Append($"params {data.SpanArgumentType}[] {data.ArgName}"),
                        data.IsStatic,
                        data.ReturnType,
                        data.TypeArguments,
                        data.TypeConstraints);
                    _sourceBuilder.AppendLine($"var {data.ArgNameSpan} = new global::System.ReadOnlySpan<{data.SpanArgumentType}>({data.ArgName});");
                    CallOriginalMethod(
                        data.MethodName,
                        data.ParameterInfos,
                        data.ReturnsKind,
                        data.TypeArguments,
                        data.ArgNameSpanInput);
                    _sourceBuilder.CloseBlock();
                }
            }

            CloseTimes(_sourceBuilder, nestLevel);
        }

        private void GenerateArgumentsClass()
        {
            for (int i = 1; i <= _maxOverridesMax; i++)
            {
                _sourceBuilder.AppendLine();
                CreateArguments(_sourceBuilder, i);
            }
        }

        private void CallOriginalMethod(
            string name,
            List<ParameterInfo> parameterInfos,
            ReturnKind returnsKind,
            List<string> typeArguments,
            string paramsArgument)
        {
            var codeLine = _sourceBuilder.StartLine();
            if (returnsKind != ReturnKind.ReturnsVoid)
            {
                codeLine.Returns();
            }
            if (returnsKind == ReturnKind.ReturnsRef)
            {
                codeLine.AddSegment("ref ");
            }
            codeLine.AddSegment(name);
            if (typeArguments.Count > 0)
            {
                codeLine.AddSegment("<");
                codeLine.AddCommaSeparatedList(typeArguments);
                codeLine.AddSegment(">");
            }
            codeLine.AddSegment("(");
            codeLine.AddCommaSeparatedList(parameterInfos.Select(e => e.ToPassParameter()));
            codeLine.AddSegment($", {paramsArgument})");
            codeLine.EndLine();
        }

        private static void CreateArguments(SourceBuilder sb, int length)
        {
            sb.Attribute($"System.Runtime.CompilerServices.InlineArray({length})");
            sb.GenericStruct($"Arguments{length}", "T");
            sb.Field("T", "arg0");
            sb.AppendLine();
            sb.Constructor(Enumerable.Range(0, length).Select(e => $"T value{e}"));
            sb.AppendLine($"arg0 = value0;");
            for (int i = 1; i < length; i++)
            {
                sb.AppendLine($"this[{i}] = value{i};");
            }
            sb.CloseBlock();
            sb.CloseBlock();
        }

        private static int CreateClasses(INamedTypeSymbol? typeInfo, SourceBuilder sb)
        {
            var items = SemanticHelpers.GetTypeHierarchy(typeInfo);
            foreach (var item in items)
            {
                sb.Class(item.ToDisplayString(SymbolDisplayFormat.MinimallyQualifiedFormat));
            }

            return items.Count;
        }

        private static void CloseTimes(SourceBuilder sb, int nestLevel)
        {
            for (int i = 0; i < nestLevel; i++)
            {
                sb.CloseBlock();
            }
        }

        private static void AddNamespace(SourceBuilder sb, INamedTypeSymbol typeInfo)
        {
            if (typeInfo.ContainingNamespace.IsGlobalNamespace)
                return;

            sb.Namespace(SemanticHelpers.GetNameSpaceNoGlobal(typeInfo));
        }

        private static void AddNamespaceCloseBlock(SourceBuilder sb, INamedTypeSymbol typeInfo)
        {
            if (typeInfo.ContainingNamespace.IsGlobalNamespace)
                return;

            sb.CloseBlock();
        }
    }
}
